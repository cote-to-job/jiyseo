class Solution {
    public int solution(int[] money) {
        
        int n = money.length;
        int max = 0;
        
        // [0] 집을 털면 [n-1] 집을 못 텀 -> money[0]포함, money[n-1]제외
        // [0], ..., [n-2] 사이의 최대값
        int [] dp1 = new int[n];
        dp1[0] = money[0];
        dp1[1] = Math.max(money[0], money[1]);
        for (int i = 2; i < n-1; i++) {
            dp1[i] = Math.max(dp1[i - 1], dp1[i - 2] + money[i]);
        }
      
        // [0] 집을 털지 않고 [n-1] 집을 텀
        // [1], ... [n-1] 사이의 최대값
        int[] dp2 = new int[n];
        dp2[0] = 0;  // 첫 번째 집을 털지 않으므로 0
        dp2[1] = money[1];
        for (int i = 2; i < n; i++) {
            dp2[i] = Math.max(dp2[i - 1], dp2[i - 2] + money[i]);
        }

        // 두 경우 중 최댓값 반환
        return Math.max(dp1[n - 2], dp2[n - 1]);
        
    }
}



# 파이썬
def solution(money):
    n = len(money)
    
    # [0] 집을 털면 [n-1] 집을 못 털음 -> money[0] 포함, money[n-1] 제외
    dp1 = [0] * n
    dp1[0] = money[0]
    dp1[1] = max(money[0], money[1])

    for i in range(2, n - 1):  # 마지막 집 제외 (n-1)
        dp1[i] = max(dp1[i - 1], dp1[i - 2] + money[i])
    
    # [0] 집을 털지 않고 [n-1] 집을 털 수 있음 -> money[1] ~ money[n-1] 사용
    dp2 = [0] * n
    dp2[0] = 0  # 첫 번째 집을 털지 않으므로 0
    dp2[1] = money[1]

    for i in range(2, n):  # 마지막 집 포함 (n)
        dp2[i] = max(dp2[i - 1], dp2[i - 2] + money[i])

    # 두 경우 중 최댓값 반환
    return max(dp1[n - 2], dp2[n - 1])
